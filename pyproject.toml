[tool.poetry]
name = "contest-bitnp"
version = "0.1.0"
description = "国防知识竞赛"
authors = [
    "Y.D.X. <73375426+YDX-2147483647@users.noreply.github.com>",
    "Phoupraw <Phoupraw@users.noreply.github.com>",
]
readme = "README.md"
packages = [{ include = "contest" }]

[tool.poetry.dependencies]
python = "^3.12"
Django = "^4.2"
humanize = "^4.7.0"
django-cas-ng = "^4.3.0"
django-tailwind = "^3.6.0"
pyyaml = "^6.0.1"
django-redis = "^5.2.0"  # 添加 django-redis 依赖
celery = "^5.4.0"
eventlet = "^0.36.1"
django-celery-beat = "^2.6.0"


[tool.poetry.group.dev.dependencies]
mypy = "^1.4.1"
django-stubs = { extras = ["compatible-mypy"], version = "^4.2.3" }
ipython = "^8.14.0"
django-tailwind = { extras = ["reload"], version = "^3.6.0" }
django-debug-toolbar = "^4.1.0"

[tool.poetry.group.deploy.dependencies]
gunicorn = "^22.0.0"
uvicorn = "^0.23.2"

[tool.poetry.group.coverage]
optional = true

[tool.poetry.group.coverage.dependencies]
coverage = { extras = ["toml"], version = "^7.2.7" }
django-coverage-plugin = "^3.1.0"

[tool.poetry.group.agg]
optional = true

[tool.poetry.group.agg.dependencies]
polars = {extras = ["xlsx2csv"], version = "^0.19.1"}
rich = "^13.5.2"
xlsxwriter = "^3.1.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[[tool.poetry.source]]
name = "tuna"
url = "https://pypi.tuna.tsinghua.edu.cn/simple/"
priority = "primary"

[tool.ruff]
line-length = 95

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "PL",  # Pylint
    "ANN", # flake8-annotations
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "S",   # flake8-bandit
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "DJ",  # flake8-django
    "FA",  # flake8-future-annotations
    "PYI", # flake8-pyi
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PGH", # pygrep-hooks
    "TRY", # tryceratops
    "SIM", # flake8-simplify
    "RUF100", # unused-noqa
]
ignore = [
    "D105",   # undocumented-magic-method
    "D415",   # ends-in-punctuation, because of Chinese
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ANN101", # missing-type-self
    "ANN102", # missing-type-cls
]
ignore-init-module-imports = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
# No need to document Django defaults
# - D100: Missing docstring in public module
# - D101: Missing docstring in public class
# - D104: Missing docstring in public package
"apps.py" = ["D100", "D101"]
"admin.py" = ["D100", "D101"]
"models.py" = [
    "D100",
    "D101", # 有`Meta`即可
    "D102", # undocumented-public-method，有`@admin.display`即可
    "D106", # undocumented-public-nested-class，例如`Meta`
]
"tests.py" = [
    "D100",
    "ANN201", # missing-return-type-undocumented-public-function，都无返回值
]
"urls.py" = ["D100"]
"views.py" = ["D100"]
"**/templatetags/__init__.py" = ["D104"]
"**/management/__init__.py" = ["D104"]
"**/management/commands/__init__.py" = ["D104"]
"**/management/commands/*.py" = ["D101"]
"scripts/*.py" = ["S101"] # assert

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
mypy_path = "$MYPY_CONFIG_FILE_DIR/contest/"

[[tool.mypy.overrides]]
module = "celery.*"
ignore_missing_imports = true

[tool.django-stubs]
django_settings_module = "contest.settings"

[tool.djlint]
indent = 2
format_attribute_template_tags = true
profile = "django"
ignore = "H006"    # `<img>` tag should have `height` and `width` attributes.

[tool.coverage.run]
command_line = "contest/manage.py test quiz"
source = ["contest/"]
omit = [
    "**/migrations/**",
    "**/node_modules/**",
    "contest/manage.py",
    "contest/contest/asgi.py",
    "contest/contest/wsgi.py",
]
plugins = [
    "django_coverage_plugin"
]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "def __str__",
]
